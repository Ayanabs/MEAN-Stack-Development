name: Angular Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  angular:
    name: Angular Build
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [20.14]

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.14
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # Install backend dependencies
      - name: Install backend dependencies
        run: npm install
        working-directory: app-backend

      # Start the backend server
      - name: Start Backend Server
        env:
          MONGO_URI: "mongodb://localhost:27017/sample"
        run: node backend.js &
        working-directory: app-backend

      # Wait for the backend to start
      - name: Wait for Backend to Start
        run: sleep 10

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
        working-directory: app-frontend

      # Run frontend tests
      - name: Run frontend tests
        run: npm run test:ci
        working-directory: app-frontend

      # Build frontend
      - name: Build frontend
        run: npm run build
        working-directory: app-frontend

       # Install Docker Compose
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Debug:List files in app-frontend
        run: ls -l ./app-frontend

      # Verify Dockerfile existence for frontend
      - name: Verify Frontend Dockerfile
        run: test -f ./app-frontend/Dockerfile || (echo "Dockerfile not found in app-frontend" && exit 1)

      # Build Docker images
      - name: Build Frontend Docker Image
        run: docker build -t mean-stack-frontend ./app-frontend

      # Verify Dockerfile existence for backend
      - name: Verify Backend Dockerfile
        run: test -f ./app-backend/Dockerfile || (echo "Dockerfile not found in app-backend" && exit 1)

      - name: Build Backend Docker Image
        run: docker build -t mean-stack-backend ./app-backend

      # Save Docker images as artifacts (optional)
      - name: Save Docker Images
        run: |
          docker save -o mean-stack-frontend.tar mean-stack-frontend
          docker save -o mean-stack-backend.tar mean-stack-backend

      # Restart Docker Containers Locally (without MongoDB)
           # Restart Docker Containers (shutdown conflicting containers if ports are already allocated)
      - name: Restart Docker Containers
        run: |
          # List all running containers for debugging
          echo "Listing all running containers:"
          docker ps -a

          # Kill processes using conflicting ports (if any)
          echo "Freeing up ports..."
          sudo lsof -ti :5000 | xargs sudo kill -9 || echo "No process using port 5000"
          sudo lsof -ti :27017 | xargs sudo kill -9 || echo "No process using port 27017"
          sudo lsof -ti :4200 | xargs sudo kill -9 || echo "No process using port 4200"

          # Remove existing containers if present
          echo "Removing old containers..."
          docker rm -f mean-stack-development-backend-1 mean-stack-development-frontend-1 mean-stack-development-mongo-1 || true

          # Bring down any leftover Docker Compose networks
          echo "Bringing down existing Docker Compose setup..."
          docker-compose down || true

          # Start updated containers
          echo "Starting updated containers..."
          docker-compose up --build -d




